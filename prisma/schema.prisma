generator dbml {
  provider = "prisma-dbml-generator"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String
  npm                String
  alamat             String?
  semester           String?
  phone              String
  email              String              @unique
  emailVerified      DateTime?
  password           String
  role               Role                @default(MAHASISWA)
  prodiId            String?
  activityLog        ActivityLog[]
  Buku               Buku[]
  NotifMessage       NotifMessage[]
  notification       Notification[]
  PengajuanBeasiswa  PengajuanBeasiswa[]
  prestasiDataTables PengajuanOnUsers[]
  prodi              MasterDataProdi?    @relation(fields: [prodiId], references: [id])
}

model Beasiswa {
  id               String @id @default(cuid())
  syarat           String
  templateFormulir String
}

model Dosen {
  id                String              @id @default(cuid())
  name              String
  nidn              String
  prodiId           String?
  prodi             MasterDataProdi?    @relation(fields: [prodiId], references: [id])
  PengajuanOnUsers  PengajuanOnUsers[]
  PengajuanPKM      PengajuanPKM[]
  prestasiDataTable PrestasiDataTable[]
}

model MasterDataFakultas {
  id    String            @id @default(cuid())
  name  String
  prodi MasterDataProdi[]
}

model MasterDataProdi {
  id         String             @id @default(cuid())
  name       String
  fakultasId String
  Dosen      Dosen[]
  Fakultas   MasterDataFakultas @relation(fields: [fakultasId], references: [id])
  user       User[]
}

model MasterDataOrkem {
  id                String              @id @default(cuid())
  name              String
  PrestasiDataTable PrestasiDataTable[]
}

model MasterDataTingkatKejuaraan {
  id                String              @id @default(cuid())
  name              String
  PrestasiDataTable PrestasiDataTable[]
}

model MasterDataTingkatPrestasi {
  id                String              @id @default(cuid())
  name              String
  PrestasiDataTable PrestasiDataTable[]
}

model LampiranData {
  id                  String              @id @default(cuid())
  piagamPenghargaan   String?
  fotoPenyerahanPiala String?
  undanganKejuaraan   String?
  dokumenPendukung    String?
  PrestasiDataTable   PrestasiDataTable[]
}

/// ==== PENGAJUAN PRESTASI TABLE === ///
model PrestasiDataTable {
  id                 String                     @id @default(cuid())
  noSK               String?
  tanggalSK          DateTime?
  kegiatan           String
  tanggalKegiatan    DateTime
  penyelenggara      String?
  createdAt          DateTime?                  @default(now())
  orkemId            String
  tingkatKejuaraanId String
  tingkatPrestasiId  String
  dosenId            String
  lampiranId         String
  updatedAt          DateTime?                  @default(now())
  status             String                     @default("Sedang Diproses")
  activityLog        ActivityLog[]
  users              PengajuanOnUsers[]
  dosen              Dosen                      @relation(fields: [dosenId], references: [id])
  lampiran           LampiranData               @relation(fields: [lampiranId], references: [id])
  orkem              MasterDataOrkem            @relation(fields: [orkemId], references: [id])
  tingkatKejuaraan   MasterDataTingkatKejuaraan @relation(fields: [tingkatKejuaraanId], references: [id])
  tingkatPrestasi    MasterDataTingkatPrestasi  @relation(fields: [tingkatPrestasiId], references: [id])
}

model PengajuanOnUsers {
  userId                       String
  dosenId                      String
  prestasiDataTableId          String?
  PengajuanPKMId               String?
  PengajuanPatenAndHakiTableId String?
  keterangan                   String             @default("Ketua Tim")
  id                           String             @id @default(cuid())
  PengajuanPKM                 PengajuanPKM?      @relation(fields: [PengajuanPKMId], references: [id])
  PengajuanPatenAndHakiTable   PatenAndHakiTable? @relation(fields: [PengajuanPatenAndHakiTableId], references: [id])
  dosen                        Dosen              @relation(fields: [dosenId], references: [id])
  PrestasiDataTable            PrestasiDataTable? @relation(fields: [prestasiDataTableId], references: [id])
  user                         User               @relation(fields: [userId], references: [id])
}

/// === PENGAJUAN NEW FEATURE TABLE === /// (KEGIATAN BELUM TERLAKSANA)
model PengajuanPKM {
  id              String             @id @default(cuid())
  judul           String
  deskripsi       String
  isValidated     Boolean            @default(false)
  validatedAt     DateTime
  createdAt       DateTime           @default(now())
  lampiran        String?
  totalAnggaran   Int
  anggaranDosen   Int
  dosenId         String
  status          String             @default("Sedang Diproses")
  tanggalKegiatan DateTime
  activityLog     ActivityLog[]
  users           PengajuanOnUsers[]
  dosen           Dosen              @relation(fields: [dosenId], references: [id])
}

model PengajuanBeasiswa {
  id               String        @id @default(cuid())
  isValidated      Boolean       @default(false)
  validatedAt      DateTime
  createdAt        DateTime      @default(now())
  dokumenFormulir  String
  deskripsiDokumen String
  dokumenPendukung String
  userId           String
  status           String
  activityLog      ActivityLog[]
  user             User          @relation(fields: [userId], references: [id])
}

model SKRektor {
  id         String   @id @default(cuid())
  nomorSK    String
  judul      String
  tanggal    DateTime
  keterangan String
  lampiran   String
}

/// === PENGAJUAN LUARAN TABLE === ///
model PatenAndHakiTable {
  id               String             @id @default(cuid())
  judul            String
  nomorPaten       String
  expiredDate      DateTime
  createdAt        DateTime           @default(now())
  keterangan       String
  validatedAt      DateTime
  isValidated      Boolean            @default(false)
  jenis            PatenAndHaki
  activityLog      ActivityLog[]
  PengajuanOnUsers PengajuanOnUsers[]
}

model Buku {
  id              String        @id @default(cuid())
  NomorISBN       String
  Penulis         String
  Pengarang       String
  Penerbit        String
  tahunTerbit     DateTime
  jumlahEksemplar Int
  validatedAt     DateTime
  createdAt       DateTime      @default(now())
  userId          String
  status          String?
  activityLog     ActivityLog[]
  user            User          @relation(fields: [userId], references: [id])
}

model ActivityLog {
  id                  String             @id @default(cuid())
  catatan             String?
  userId              String
  prestasiDataTableId String?
  PatenAndHakiTableId String?
  bukuId              String?
  pengajuanPKMId      String?
  pengajuanBeasiswaId String?
  status              String             @default("Sedang Diproses")
  createdAt           DateTime           @default(now())
  PatenAndHakiTable   PatenAndHakiTable? @relation(fields: [PatenAndHakiTableId], references: [id])
  Buku                Buku?              @relation(fields: [bukuId], references: [id])
  PengajuanBeasiswa   PengajuanBeasiswa? @relation(fields: [pengajuanBeasiswaId], references: [id])
  PengajuanPKM        PengajuanPKM?      @relation(fields: [pengajuanPKMId], references: [id])
  PrestasiDataTable   PrestasiDataTable? @relation(fields: [prestasiDataTableId], references: [id])
  user                User               @relation(fields: [userId], references: [id])
}

model NotifMessage {
  id           String         @id @default(cuid())
  status       String
  module       String
  moduleId     String
  notifMessage String
  userInfo     String[]
  createdAt    DateTime       @default(now())
  userId       String
  createdBy    User           @relation(fields: [userId], references: [id])
  Notification Notification[]
}

model Notification {
  id                    String       @id @default(cuid())
  readed                Boolean      @default(false)
  notificationMessageId String
  userId                String
  notificationMessage   NotifMessage @relation(fields: [notificationMessageId], references: [id])
  User                  User         @relation(fields: [userId], references: [id])
}

enum Role {
  MAHASISWA
  ADMIN
}

enum PatenAndHaki {
  PATEN
  HAKI
}
